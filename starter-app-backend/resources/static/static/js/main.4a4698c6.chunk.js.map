{"version":3,"sources":["Coms.js","State.js","App.js","serviceWorker.js","index.js"],"names":["ComServer","fn","WebSocket","addEventListener","event","data","this","url","payload","byName","then","oopsie","console","log","axios","post","resp","catch","err","byId","get","cs","msg","store","dispatch","thingCreated","thingSlice","createSlice","name","initialState","things","reducers","addThing","state","action","create","updateThings","read","rootReducer","combineReducers","reducer","configureStore","actions","styles","makeStyles","theme","mainContent","display","flexDirection","alignItems","justifyContent","height","form","App","useStyles","useSelector","s","Container","className","maxWidth","onSubmit","e","preventDefault","target","thang","value","noValidate","autoComplete","TextField","id","label","Input","type","Card","CardContent","map","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAEqBA,E,WACjB,WAAYC,GAAK,oBACb,IAAIC,UAAU,wBAAwBC,iBAAiB,WAAW,SAACC,GAAYH,EAAGG,EAAMC,SACxFC,KAAKC,IAAM,4B,mDAGRC,EAASC,EAAQC,EAAMC,GAC1BC,QAAQC,IAAIL,GACZM,IAAMC,KAAN,UAAcT,KAAKC,IAAnB,YAA0BE,GAAUD,GAC/BE,MAAK,SAACM,GAAD,OAAUN,EAAKM,EAAKX,SACzBY,OAAM,SAACC,GAAD,OAASP,EAAOO,Q,2BAK1BT,EAAQU,EAAMT,EAAMC,GACrBG,IAAMM,IAAN,UAAad,KAAKC,IAAlB,YAAyBE,EAAzB,YAAmCU,IAC9BT,MAAK,SAACM,GAAD,OAAUN,EAAKM,EAAKX,SACzBY,MAAMN,O,aCfbU,EAAK,IAAIrB,GAAU,SAACsB,GACtBV,QAAQC,IAAIS,GACD,YAARA,GAAmBC,EAAMC,SAASC,QAGnCC,EAAaC,YAAY,CAC3BC,KAAM,SACNC,aAAc,CAACC,OAAQ,IACvBC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdb,EAAGc,OAAOD,EAAO1B,QAAS,SAAS,SAACQ,GAAUJ,QAAQC,IAAIG,MAAQ,SAACE,GAAD,OAASN,QAAQC,IAAI,QAASK,OAEpGkB,aAAc,SAACH,EAAOC,GAClBD,EAAMH,OAASI,EAAO1B,SAE1BiB,aAAc,SAACQ,GACXZ,EAAGgB,KAAK,SAAU,IAAI,SAACrB,GAAUO,EAAMC,SAASY,EAAapB,OAAS,SAACE,GAAD,OAASN,QAAQC,IAAI,QAASK,UAK1GoB,EAAcC,0BAAgB,CAChCT,OAAQJ,EAAWc,UAGjBjB,EAAQkB,YAAe,CACzBD,QAASF,I,EAKTZ,EADAgB,QAAUV,E,EAAAA,SAAUP,E,EAAAA,aAAcW,E,EAAAA,a,kBCvBhCO,EAASC,aAAW,SAAAC,GAAK,MAAK,CAChCC,YAAa,CACTC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,eAChBC,OAAQ,SAEZC,KAAM,CACFL,QAAS,OACTC,cAAe,SACfE,eAAgB,qBA8BTG,MA1Bf,WAEI,IAAMC,EAAYX,IAOZb,EAASyB,aAAY,SAAAC,GAAC,OAAIA,EAAE1B,OAAOA,UAGzC,OAFAlB,QAAQC,IAAIiB,GAGR,kBAAC2B,EAAA,EAAD,CAAWC,UAAWJ,EAAUR,YAAaa,SAAS,MAClD,0BAAMC,SAVI,SAACC,GACfA,EAAEC,iBACFvC,EAAMC,SAASQ,EAAS,CAAEJ,KAAMiC,EAAEE,OAAOC,MAAMC,UAQhBP,UAAWJ,EAAUF,KAAMc,YAAU,EAACC,aAAa,OAC1E,kBAACC,EAAA,EAAD,CAAWC,GAAG,aAAazC,KAAK,QAAQ0C,MAAM,oBAC9C,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASP,MAAM,kBAE/B,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBACC5C,EAAO6C,KAAI,SAAAC,GAAC,OAAI,kBAACF,EAAA,EAAD,KAAcE,EAAEhD,YCnC7BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,CAAU5D,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,OAAoB6D,SAASC,eAAe,SDyH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,MAAK,SAAA+E,GACjCA,EAAaC,kB","file":"static/js/main.4a4698c6.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class ComServer {\n    constructor(fn) {//function to be fired on recieve\n        new WebSocket('ws://localhost:8080/').addEventListener('message', (event) => { fn(event.data) })\n        this.url = 'http://localhost:8080/api'\n    }\n\n    create(payload, byName, then, oopsie) {\n        console.log(payload)\n        axios.post(`${this.url}/${byName}`, payload)\n            .then((resp) => then(resp.data))\n            .catch((err) => oopsie(err))\n\n\n    }\n\n    read(byName, byId, then, oopsie) {\n        axios.get(`${this.url}/${byName}/${byId}`)\n            .then((resp) => then(resp.data))\n            .catch(oopsie)\n    }\n}\n","import axios from 'axios';\nimport { createSlice, configureStore } from 'redux-starter-kit';\nimport ComServer from './Coms'\nimport { combineReducers } from 'redux'\n\nconst cs = new ComServer((msg) => {\n    console.log(msg)\n    if(msg === \"created\") store.dispatch(thingCreated())\n})\n\nconst thingSlice = createSlice({\n    name: 'things',\n    initialState: {things: []},\n    reducers: {\n        addThing: (state, action) => {\n            cs.create(action.payload, \"thing\", (resp) => {console.log(resp)}, (err) => console.log(\"error\", err))\n        },\n        updateThings: (state, action) => {\n            state.things = action.payload\n        },\n        thingCreated: (state) => {\n            cs.read(\"things\", \"\", (resp) => {store.dispatch(updateThings(resp))}, (err) => console.log(\"error\", err))\n        },\n    }\n})\n\nconst rootReducer = combineReducers({\n    things: thingSlice.reducer,\n})\n\nconst store = configureStore({\n    reducer: rootReducer,\n})\n\nconst {\n    actions: {addThing, thingCreated, updateThings}\n} = thingSlice\n\nexport {\n    addThing,\n    thingCreated,\n    store,\n}\n\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/styles';\nimport { useSelector } from 'react-redux';\nimport { store, addThing } from './State'\nimport { Input, TextField } from '@material-ui/core';\n\nconst styles = makeStyles(theme => ({\n    mainContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'space-evenly',\n        height: '25rem'\n    },\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    }\n}))\n\nfunction App() {\n\n    const useStyles = styles()\n\n    const makeThing = (e) => {\n        e.preventDefault()\n        store.dispatch(addThing({ name: e.target.thang.value }))\n    }\n\n    const things = useSelector(s => s.things.things)\n    console.log(things)\n\n    return (\n        <Container className={useStyles.mainContent} maxWidth=\"sm\">\n            <form onSubmit={makeThing} className={useStyles.form} noValidate autoComplete=\"off\">\n                <TextField id=\"thing-name\" name=\"thang\" label=\"Name your thing\"></TextField>\n                <Input type=\"submit\" value=\"Make a thing\"></Input>\n            </form>\n            <Card>\n                <CardContent>My Things</CardContent>\n                {things.map(t => <CardContent>{t.name}</CardContent>)}\n            </Card>\n        </Container>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './State'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}