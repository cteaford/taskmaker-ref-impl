{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","mainContent","display","alignItems","justifyContent","height","caseSlice","createSlice","name","initialState","text","upper","reducers","changeCase","state","updateCase","caseChange","action","payload","store","configureStore","reducer","actions","url","axios","get","then","res","data","dispatch","App","useStyles","useEffect","Container","className","maxWidth","Card","CardContent","useSelector","CardActions","Button","onClick","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAYMA,EAASC,aAAW,SAAAC,GAAK,MAAK,CAChCC,YAAa,CACTC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,aAIVC,EAAYC,YAAY,CAC1BC,KAAM,OACNC,aAAc,CAACC,KAAM,cAAeC,OAAO,GAC3CC,SAAU,CACNC,WAAY,SAAAC,GAAK,OAAIC,GAAYD,EAAMH,QACvCK,WAAY,SAACF,EAAOG,GAChBH,EAAMJ,KAAOO,EAAOC,QACpBJ,EAAMH,OAASG,EAAMH,UAK3BQ,EAAQC,YAAe,CACzBC,QAASf,EAAUe,U,EAKnBf,EADAgB,QAAUT,E,EAAAA,WAAYG,E,EAAAA,WAGpBD,EAAa,SAACJ,GAChB,IAAMY,EAAMZ,EAAQ,8BAAgC,yBACpDa,IAAMC,IAAIF,GACLG,MAAK,SAAAC,GACF,IAAMjB,EAAOiB,EAAIC,KACjBT,EAAMU,SAASb,EAAWN,QA4BvBoB,MAxBf,WACI,IAAMC,EAAYjC,IAUlB,OARAkC,qBAAU,WACNnB,MACD,IAOC,kBAACoB,EAAA,EAAD,CAAWC,UAAWH,EAAU9B,YAAakC,SAAS,MAClD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAcC,aAAY,SAAAxB,GAAK,OAAIA,EAAMJ,SACzC,kBAAC6B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QATH,WACjBtB,EAAMU,SAAShB,MAQ4B6B,KAAK,SAApC,aCtDAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,CAAU9B,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,OAAoB+B,SAASC,eAAe,SDyH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.45f5fb0c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/styles';\nimport { createSlice, configureStore } from 'redux-starter-kit';\nimport { useSelector } from 'react-redux';\n\nconst styles = makeStyles(theme => ({\n    mainContent: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '25rem'\n    }\n}))\n\nconst caseSlice = createSlice({\n    name: 'case',\n    initialState: {text: \"placeholder\", upper: false},\n    reducers: {\n        changeCase: state => updateCase(!state.upper),\n        caseChange: (state, action) => {\n            state.text = action.payload\n            state.upper = !state.upper\n        }\n    }\n})\n\nconst store = configureStore({\n    reducer: caseSlice.reducer\n})\n\nconst {\n    actions: {changeCase, caseChange}\n} = caseSlice\n\nconst updateCase = (upper) => {\n    const url = upper ? 'http://localhost:8080/upper' : 'http://localhost:8080/'\n    axios.get(url)\n        .then(res => {\n            const text = res.data;\n            store.dispatch(caseChange(text))\n        })\n}\n\nfunction App() {\n    const useStyles = styles()\n\n    useEffect(() => {\n        changeCase()\n    }, [])\n\n    const clickHandler = () => {\n        store.dispatch(changeCase())\n    }\n\n    return (\n        <Container className={useStyles.mainContent} maxWidth=\"sm\">\n            <Card>\n                <CardContent>{useSelector(state => state.text)}</CardContent>\n                <CardActions>\n                    <Button onClick={clickHandler} size=\"small\">Smoll</Button>\n                </CardActions>\n            </Card>\n        </Container>\n    )\n}\n\nexport { store }\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}